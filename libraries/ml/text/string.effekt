module text/string

import effekt
import immutable/option
import immutable/list
import internal/option

// For more information on the sml string type:
//    https://smlfamily.github.io/Basis/string.html#String:STR:SPEC

def charAt(str: String, index: Int): Option[String] =
    if (index < 0 || length(str) <= index)
        Some(unsafeCharAt(str, index))
    else None()

def takeWhile(str: String){ f: String => Boolean }: String = {
    def rec(i: Int, acc: String): String = {
        if (i < length(str)) {
            val c = unsafeCharAt(str, i)
            if (f(c)) {
                rec(i+1, acc ++ c)
            } else acc
        } else acc
    }
    rec(0, "")
}

extern pure def length(str: String): Int =
    "String.size str"

extern pure def startsWith(str: String, prefix: String): Boolean =
    "String.isPrefix prefix str"

extern pure def endsWith(str: String, prefix: String): Boolean =
    "String.isSuffix prefix str"

// extern pure def repeat(str: String, n: Int): String =
//     "???"

def substring(str: String, from: Int): String =
    if (from < 0 || length(str) <= from)
        str
    else unsafeSubstring(str, from)
def substring(str: String, from: Int, endp: Int): String =
    if (from < 0 || length(str) <= from || length(str) <= endp)
        str
    else unsafeSubstring(str, from, endp)

extern pure def unsafeSubstring(str: String, from: Int): String =
    "String.extract (str, from, NONE)"

extern pure def unsafeSubstring(str: String, from: Int, endp: Int): String =
    "String.extract (str, from, SOME(endp))"

// extern pure def split(str: String, sep: String): Array[String] =
//     "Array.fromList (map (String.str) (String.explode str))"

// extern pure def trim(str: String): String =
//     "???"

// also accepts sml style `~2` for unary minus along with `+2` and `-2`
extern pure def internalStringToInt(str: String): MLOption[Int] =
    "Int.fromString str"

def toInt(str: String): Option[Int] = toOption(internalStringToInt(str))

extern pure def unsafeCharAt(str: String, n: Int): String =
    "String.str (String.sub (str, n))"

def map[A](str: String){ f: String => A }: List[A] = {
    def rec(i: Int): List[A] = {
        if(i < length(str)) {
            Cons(f(str.unsafeCharAt(i)), rec(i+1))
        } else { Nil() }
    }
    rec(0)
}
def split(str: String, sep: String): List[String] = {
    def rec(startcheck: Int, startcopy: Int): List[String] = {
        if (length(str) < startcheck + length(sep)) {
            Cons(substring(str, startcopy), Nil())
        } else {
            if(substring(str, startcheck, startcheck + length(sep)) == sep) {
                Cons(substring(str, startcopy, startcheck), 
                     rec(startcheck + length(sep), startcheck + length(sep)))
            } else {
                rec(startcheck + 1, startcopy)
            }
        }
    }
    if (sep == "") {
        map(str){ c => c }
    } else { 
        rec(0,0) 
    }
}

val ANSI_GREEN = "\u001b[32m"
val ANSI_RED = "\u001b[31m"
val ANSI_RESET = "\u001b[0m"