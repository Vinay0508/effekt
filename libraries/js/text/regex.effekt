module text/regex

import text/string
import immutable/option

extern type Regex

record Match(matched: String, index: Int)

extern pure def regex(str: String): Regex =
  "new RegExp(str)"

def exec(reg: Regex, str: String): Option[Match] =
  reg.unsafeExec(str).undefinedToOption match {
    case None() => None()
    case Some(v) => Some(Match(v.matched, v.index))
  }

// internal representation { matched: String, index: Int }
extern type RegexMatch
extern pure def matched(r: RegexMatch): String = "r.matched"
extern pure def index(r: RegexMatch): Int = "r.index"

// internals
extern pure def unsafeExec(reg: Regex, str: String): RegexMatch =
  "(function () { var res = reg.exec(str); if (res === null) { return undefined } else { return { matched: res[0], index: res.index} }})()"
