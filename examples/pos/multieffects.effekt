module examples/pos/multieffects

// Design space
// ------------
// 1. is it confusing that it captures the continuation and is called a def?
// 2. it has been declared, so it does not need type annotations (inconsistency)
// Why `with State { ... }`?
//


effect Exc {
    def raise[A](): A
}

effect Exception[A](msg: String): A

// TODO If we move `State` below `state` then it is not resolved
effect State {
    def get(): Int
    def set(n: Int): Unit
}

def state[R](init: Int) { f: => R / { State, Exception } }: Unit = {
    var s = init;
    try { f(); () } with State {
        def get() = resume(s)
        def set(n) = { s = n; resume(()) }
    } with Exception[A] { msg => println(msg) }

}

def main() = {
    with state(4);
    println(do get())
}